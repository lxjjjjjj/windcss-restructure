{"version":3,"file":"index.js","sources":["lib/index.js"],"sourcesContent":["const fs = require('fs/promises')\nconst path = require('path')\nconst fg = require('fast-glob')\nconst { getCommonClass } = require('mp-common-class')\nconst { Logger } = require('./util/index')\nconst getMergedConfig = require('./resolveConfig')\nconst { getSpecificArgsObj, parseCliArgs } = require('./resolveCliArgs')\n\nconst globalConstants = {\n  // 样式隔离 styleIsolation 开启样式隔离\n  SWITCH_STYLE_ISOLATION: 'apply-shared',\n  // map 存储 app.json 中的分包信息\n  subPackageMap: new Map(),\n  // 注册在主包的页面路径\n  mainPkgPagesPath: []\n}\n\nconst getFinalConfig = async () => {\n  const mergedConfig = await getMergedConfig()\n  const { specificArgsObj, restArgs } = getSpecificArgsObj(parseCliArgs())\n  const restArgsObj = { cliArgs: restArgs }\n  const finalConfig = Object.assign(globalConstants, mergedConfig, specificArgsObj, restArgsObj)\n  return finalConfig\n}\n\nconst mountFinalCfgToGlobal = async () => {\n  // const { globalFinalConfig: { miniprogramPath } } = global\n  // 后面的同类型写法：为啥解构赋值报错\n  const miniprogramPath = global.globalFinalCfg.miniprogramPath\n  global.globalFinalCfg.miniprogramAbsPath = path.resolve(__dirname, miniprogramPath)\n}\n\n// 通过app.json构建map并挂载到全局\nconst setSubpackageMap = async () => {\n  // let { globalFinalConfig: { miniprogramAbsPath } } = global\n  const miniprogramAbsPath = global.globalFinalCfg.miniprogramAbsPath\n  try {\n    const appContent = await fs.readFile(path.resolve(miniprogramAbsPath, './app.json'), 'utf8')\n    const appContentObject = JSON.parse(appContent)\n    global.globalFinalCfg.mainPkgPagesPath = appContentObject.pages\n    const subPackages = appContentObject?.subPackages\n    if (!subPackages) {\n      // 用户如果没配置分包，则校验配置，warning并默认走主包输出配置\n    }\n    subPackages.forEach((curSubPkg, index) => {\n      const subPkgRootName = curSubPkg.root\n      const subPkgAbsPath = path.resolve(miniprogramAbsPath, subPkgRootName)\n      global.globalFinalCfg.subPackageMap.set(subPkgAbsPath, curSubPkg)\n    })\n  } catch (err) {\n    throw err\n  }\n}\n\n// globalFinalConfig 示例\n// const globalFinalConfig = {\n//   // 样式隔离 styleIsolation 开启样式隔离\n//   SWITCH_STYLE_ISOLATION: 'apply-shared',\n//   // map 存储 app.json 中的分包\n//   subPackageMap: new Map(),\n//   // 小程序所在目录\n//   // 小程序文件目录,此处以scripts作为相对，有问题，待修改\n//   miniprogramPath: '../dist/wx',\n//   // 'tailwindcss' 'windicss'\n//   classMode: 'tailwindcss',\n//   // 样式生成策略\n//   cssMode: {\n//     mainPackage: true,\n//     subPackage: true,\n//     specSubPackage: []\n//   },\n//    cliArgs\n//   // 以下为可选，合并策略待定\n//   configPath: ''\n// }\n\n// // 以下为tailwind的build模式\n// // tailwindBuild()\n// // 扫描\n// /**\n//  * 文件扫描方法\n//  * @param currentPath 当前扫描路径\n//  * @returns {Promise<void>}\n//  */\n// // TODO 使用fast-glob或者node-glob加速扫描\n// const recursiveScanFiles = async currentPath => {\n//   try {\n//     const currentFiles = await fs.readdir(currentPath)\n//     for (let i = 0, len = currentFiles.length; i < len; i++) {\n//       const currentFile = currentFiles[i]\n//       // 绝对路径\n//       const currentAbsPath = path.resolve(currentPath, currentFile)\n//       const currentAbsStat = await fs.stat(currentAbsPath)\n//       const isDirectory = currentAbsStat.isDirectory()\n//       // 设置分包映射 map\n//       await setSubpackageMap()\n//       if (globalFinalConfig.subPackageMap.has(currentAbsPath)) {\n//         // 分包路径下创建相关页面\n//         // 输出 index.wxss 到分包 root\n//         // TODO 增加cssMode判断，改变扫描执行策略及outputPath生成策略\n//         const outputPath = path.resolve(currentPath, currentAbsPath, './index.wxss')\n//         // TODO 不支持npx时直接执行文件\n//         if (!shell.which('npx')) {\n//           // Logger.error('sorry, this script requires npx, please update npm version!')\n//           shell.exit(1)\n//         }\n//         execCli(args, outputPath)\n//         // 自动导入分包样式\n//         await autoImportSubPackageStyle(currentAbsPath, outputPath)\n//       } else if (isDirectory) {\n//         // 深度扫描\n//         await recursiveScanFiles(currentAbsPath)\n//       }\n//     }\n//   } catch (err) {\n//     throw err\n//   }\n// }\n\n// 删除源文件\n// TODO 待对比全删和只删该次未用到文件，以及未来watch模式优化\nconst deleteOldOutputFiles = async () => {\n  const miniprogramAbsPath = global.globalFinalCfg.miniprogramAbsPath\n  const relativePath = path.relative('/Users/didi/Desktop/自己的项目/mpx-example', miniprogramAbsPath)\n  const projectRootPattern = fg.sync(`./${relativePath}/**/output.wxss`)\n  // TODO 是否有更优雅的批量删除api\n  projectRootPattern.forEach((outputFile) => {\n    fs.unlink(outputFile)\n  })\n}\n\nconst extractSubPkgCommonStyle = async (...scanTaskQueue) => {\n  const miniprogramAbsPath = global.globalFinalCfg.miniprogramAbsPath\n  const subPkgAbsPath = scanTaskQueue.filter((curPkgAbsPath) => {\n    return curPkgAbsPath !== miniprogramAbsPath\n  })\n  getCommonClass({ weight: 2, css: 'output.wxss', commonCssName: 'common.wxss', outputFilePath: miniprogramAbsPath, subpackageArr: [...subPkgAbsPath] })\n}\n\n// refactor: 重写原recursiveScanFiles，不靠循环驱动，而是靠遍历器驱动\nfunction execCliByCssMode (...scanTaskQueue) {\n  const execCli = require('./cliExpand')\n  scanTaskQueue.forEach((toBeScannedPath) => {\n    execCli(toBeScannedPath, ...scanTaskQueue)\n  })\n}\n\nconst asyncSchedule = async () => {\n  global.globalFinalCfg = await getFinalConfig()\n  await mountFinalCfgToGlobal()\n  await setSubpackageMap()\n  // console.log('======全局配置======', global.globalFinalCfg)\n  const execScanStrategy = require('./scanStrategy')\n  const { globalFinalCfg: { cssMode } } = global\n  const { scanTaskQueue, queuePagesPath } = await execScanStrategy(cssMode)\n  // console.log('======待扫描队列======', scanTaskQueue)\n  const processSubPkg = require('./processSubpackage')\n  await processSubPkg(queuePagesPath, ...scanTaskQueue)\n  await deleteOldOutputFiles()\n  await execCliByCssMode(...scanTaskQueue)\n  await extractSubPkgCommonStyle(...scanTaskQueue)\n}\n\n// TODO 重复执行cli时间损耗较大，考虑优化或者 例如 开发模式下变成只生成主包模式\n// TODO rebuild 时，检测到上次残留文件则删除，或者先全量删除（在没有watch前）\n// TODO 接入postcss提重入口\n\nasync function init () {\n  Logger.warning('==========tailwind compile start==========')\n  console.time('tailwind build time')\n  await asyncSchedule()\n  Logger.warning('==========tailwind compile end==========')\n  console.timeEnd('tailwind build time')\n}\n\ninit()\n"],"names":["fs","require","path","fg","getCommonClass","Logger","getMergedConfig","getSpecificArgsObj","parseCliArgs","globalConstants","SWITCH_STYLE_ISOLATION","subPackageMap","Map","mainPkgPagesPath","getFinalConfig","mergedConfig","specificArgsObj","restArgs","restArgsObj","cliArgs","finalConfig","Object","assign","mountFinalCfgToGlobal","miniprogramPath","global","globalFinalCfg","miniprogramAbsPath","resolve","__dirname","setSubpackageMap","readFile","appContent","appContentObject","JSON","parse","pages","subPackages","forEach","curSubPkg","index","subPkgRootName","root","subPkgAbsPath","set","deleteOldOutputFiles","relativePath","relative","sync","outputFile","unlink","extractSubPkgCommonStyle","scanTaskQueue","filter","curPkgAbsPath","weight","css","commonCssName","outputFilePath","subpackageArr","execCliByCssMode","execCli","toBeScannedPath","asyncSchedule","execScanStrategy","cssMode","queuePagesPath","processSubPkg","warning","console","time","timeEnd","init"],"mappings":"moCAAA,IAAMA,EAAKC,QAAQ,eACbC,EAAOD,QAAQ,QACfE,EAAKF,QAAQ,aACXG,EAAmBH,QAAQ,mBAA3BG,eACAC,EAAWJ,QAAQ,gBAAnBI,OACFC,EAAkBL,QAAQ,qBACaA,QAAQ,oBAA7CM,IAAAA,mBAAoBC,IAAAA,aAEtBC,EAAkB,CAEtBC,uBAAwB,eAExBC,cAAe,IAAIC,IAEnBC,iBAAkB,IAGdC,6CAAiB,sHACMR,kBAArBS,WACgCR,EAAmBC,KAAjDQ,IAAAA,gBAAiBC,IAAAA,SACnBC,EAAc,CAAEC,QAASF,GACzBG,EAAcC,OAAOC,OAAOb,EAAiBM,EAAcC,EAAiBE,qBAC3EE,iGAGHG,6CAAwB,kGAGtBC,EAAkBC,OAAOC,eAAeF,gBAC9CC,OAAOC,eAAeC,mBAAqBzB,EAAK0B,QAAQC,UAAWL,iGAI/DM,6CAAmB,2GAEjBH,EAAqBF,OAAOC,eAAeC,qCAEtB3B,EAAG+B,SAAS7B,EAAK0B,QAAQD,EAAoB,cAAe,eAA/EK,SACAC,EAAmBC,KAAKC,MAAMH,GACpCP,OAAOC,eAAeb,iBAAmBoB,EAAiBG,OACtCH,MAAAA,SAAAA,EAAkBI,aAI1BC,QAAQ,SAACC,EAAWC,OACxBC,EAAiBF,EAAUG,KAC3BC,EAAgBzC,EAAK0B,QAAQD,EAAoBc,GACvDhB,OAAOC,eAAef,cAAciC,IAAID,EAAeJ,+KA0EvDM,6CAAuB,kGACrBlB,EAAqBF,OAAOC,eAAeC,mBAC3CmB,EAAe5C,EAAK6C,SAAS,wCAAyCpB,GACjDxB,EAAG6C,iBAAUF,sBAErBR,QAAQ,SAACW,GAC1BjD,EAAGkD,OAAOD,mGAIRE,6CAA2B,0HACzBxB,EAAqBF,OAAOC,eAAeC,8BADRyB,2BAAAA,UAEnCT,EAAgBS,EAAcC,OAAO,SAACC,UACnCA,IAAkB3B,IAE3BvB,EAAe,CAAEmD,OAAQ,EAAGC,IAAK,cAAeC,cAAe,cAAeC,eAAgB/B,EAAoBgC,gBAAmBhB,mGAIvI,SAASiB,+BAAqBR,2BAAAA,sBACtBS,EAAU5D,QAAQ,eACxBmD,EAAcd,QAAQ,SAACwB,GACrBD,gBAAQC,UAAoBV,MAIhC,IAAMW,6CAAgB,sHACUjD,kBAA9BW,OAAOC,+BACDH,2BACAO,kBAEAkC,EAAmB/D,QAAQ,oBACOwB,OAAdwC,IAAlBvC,eAAkBuC,kBACsBD,EAAiBC,2BAAzDb,IAAAA,cAAec,IAAAA,eAEjBC,EAAgBlE,QAAQ,iCACxBkE,gBAAcD,YAAmBd,8BACjCP,6BACAe,iBAAoBR,6BACpBD,iBAA4BC,mJAOpC,mGACE/C,EAAO+D,QAAQ,8CACfC,QAAQC,KAAK,gCACPP,WACN1D,EAAO+D,QAAQ,4CACfC,QAAQE,QAAQ,2HAGlBC"}